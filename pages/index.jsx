import Head from "next/head";
import { Inter } from "@next/font/google";
import styled, { createGlobalStyle, css } from "styled-components";
import { useState } from "react";

import GlobalStyle from "../styles/globalStyles";

import Genesis from "./data/kjv/Genesis.json";

const Container = styled.div`
	display: grid;
	grid-template-columns: [fullbleed-start] 24px [main-start] 1fr [main-end] 24px [fullbleed-end];
	justify-items: center;

	${(props) =>
		props.searchKeyword.length < 2
			? css`
					.results {
						display: none;
					}

					.content {
						display: block;
					}
			  `
			: css`
					.results {
						display: block;
					}

					.content {
						display: none;
					}
			  `}
`;

const BookTitle = styled.h1`
	font-family: Family, georgia, serif;
	grid-column: main;
	padding: 24px;
	margin-bottom: 24px;
	font-size: 54px;
	line-height: 60px;
`;

const Chapter = styled.div`
	max-width: 66ch;
	line-height: 1.45;
	grid-column: main;
	margin-bottom: 24px;
`;

const ChapterNumber = styled.h2`
	font-size: 54px;
	font-weight: 300;
	display: inline-block;
	float: left;
	line-height: 1.8ex;
	margin-right: 0.35ex;

	& + p sup {
		display: none;
	}
`;

const Verse = styled.p`
	display: inline;
	font-family: Family, georgia, serif;

	sup {
		opacity: 0.4;
		padding: 0 0.1ex 0 1ex;
		line-height: 0;
	}
`;

const Result = styled.p`
	font-family: Family, georgia, serif;
	padding: 24px 0;
	border-bottom: 1px solid rgb(0 0 0 / 0.1);
	p {
		margin-bottom: 6px;
	}
	.chapter-verse {
		opacity: 0.4;
	}
`;

const Search = styled.input`
	grid-column: fullbleed;
	width: 100%;
	position: sticky;
	top: 0;
	outline: none;
	border: none;
	border-radius: none;
	padding: 12px;
	border-bottom: 1px solid rgb(0 0 0 /0.1);
	border-radius: 0;
	background: white;
	z-index: 99;
	box-sizing: boder-box;
	margin-bottom: 24px;
`;

export default function Home() {
	const [currentBook, setCurrentBook] = useState(Genesis); // set the initial book to the first book in the JSON data
	const [searchKeyword, setSearchKeyword] = useState("");

	const handleSearch = (e) => {
		setSearchKeyword(e.target.value);
	};

	const getVerses = () => {
		let verses = [];

		currentBook.chapters.forEach((chapter) => {
			chapter.verses.forEach((verse) => {
				if (
					!searchKeyword ||
					verse.text.toLowerCase().includes(searchKeyword.toLowerCase())
				) {
					verses.push(
						<Result
							key={`${currentBook.book}${chapter.chapter}:${verse.verse}`}
						>
							<p>{verse.text}</p>
							<p className="chapter-verse">{`${currentBook.book} ${chapter.chapter}:${verse.verse}`}</p>
						</Result>
					);
				}
			});
		});

		return verses;
	};

	return (
		<>
			<Head>
				<title>{currentBook.book}</title>
				<meta name="description" content="Generated by create next app" />
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
				/>
				<meta name="apple-mobile-web-app-capable" content="yes" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<GlobalStyle></GlobalStyle>

			<Container searchKeyword={searchKeyword}>
				<Search type="text" placeholder="Search..." onChange={handleSearch} />

				<Chapter className="results">{getVerses()}</Chapter>

				<BookTitle className="content">{currentBook.book}</BookTitle>
				{currentBook.chapters.map((chapter) => (
					<Chapter key={chapter.chapter} className="content">
						<ChapterNumber>{`${chapter.chapter}`}</ChapterNumber>
						{chapter.verses.map((verse) => (
							<Verse key={verse.verse}>
								<sup>{verse.verse}</sup> {verse.text}
							</Verse>
						))}
					</Chapter>
				))}
			</Container>
		</>
	);
}
