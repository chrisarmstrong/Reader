import Head from "next/head";
import { Inter } from "@next/font/google";
import styled, { createGlobalStyle } from "styled-components";
import { useState } from "react";

import Genesis from "./data/kjv/Genesis.json";

const Reset = createGlobalStyle`
  /* Box sizing rules */
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  /* Remove default margin */
  body,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  ol,
  ul {
    margin: 0;
  }

  /* Remove default padding */
  body,
  p {
    padding: 0;
  }

  /* Remove list styles on ul, ol elements */
  ol,
  ul {
    list-style: none;
  }

  /* Set default font size */
  html {
    font-size: 16px;
  }

  /* Reset default font family */
  body {
    font-family: sans-serif;
  }
`;

const BookTitle = styled.h1`
  font-family: Family, georgia, serif;
`;

const Chapter = styled.div`
  padding: 24px;
`;

const Verse = styled.p`
  display: inline;
  font-family: Family, georgia, serif;

  sup {
    opacity: 0.4;
    padding: 0 0.5ex 0 1ex;
  }
`;

const Search = styled.input`
  width: 100%;
  position: sticky;
  top: 0;
  outline: none;
  border: none;
  border-radius: none;
  padding: 12px 24px;
  border-bottom: 1px solid rgb(0 0 0 /0.1);
  border-radius: 0;
  background: white;
  z-index: 99;
`;

export default function Home() {
  const [currentBook, setCurrentBook] = useState(Genesis); // set the initial book to the first book in the JSON data
  const [searchKeyword, setSearchKeyword] = useState("");
  const handleSearch = (e) => {
    setSearchKeyword(e.target.value);
  };
  const getVerses = () => {
    let verses = [];

    currentBook.chapters.forEach((chapter) => {
      chapter.verses.forEach((verse) => {
        if (
          !searchKeyword ||
          verse.text.toLowerCase().includes(searchKeyword.toLowerCase())
        ) {
          verses.push(
            <Verse key={`${currentBook.book}{chapter.chapter}:${verse.verse}`}>
              <sup className="chapter-verse">{`${chapter.chapter}:${verse.verse}`}</sup>
              <span className="verse-text">{verse.text}</span>
            </Verse>
          );
        }
      });
    });

    return verses;
  };

  return (
    <>
      <Head>
        <title>{currentBook.book}</title>
        <meta name="description" content="Generated by create next app" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
        />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <BookTitle>{currentBook.book}</BookTitle>

        <div className="search-container">
          <Search
            type="text"
            placeholder="Search keyword"
            onChange={handleSearch}
          />
          {getVerses()}
        </div>

        {/* {currentBook.chapters.map((chapter) => (
          <div key={chapter.chapter}>
            <h3>{`Chapter ${chapter.chapter}`}</h3>
            {chapter.verses.map((verse) => (
              <p key={verse.verse}>
                <sup>{verse.verse}</sup> {verse.text}
              </p>
            ))}
          </div>
        ))} */}
      </main>
    </>
  );
}
